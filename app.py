import os
import qrcode
import smtplib
import ssl
from flask import Flask, request, jsonify
from email.message import EmailMessage
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ Render
DATABASE_URL = os.environ.get("DATABASE_URL")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—Å—Ç—å
if not DATABASE_URL:
    raise RuntimeError("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

app.config["SQLALCHEMY_DATABASE_URI"] = DATABASE_URL
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
db = SQLAlchemy(app)

# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≥–æ—Å—Ç–µ–π
class Guest(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    surname = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    status = db.Column(db.String(20), default="–Ω–µ –ø—Ä–∏—à–µ–ª")

# üîπ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
with app.app_context():
    db.create_all()

# üîπ SMTP (–æ—Ç–ø—Ä–∞–≤–∫–∞ email —Å QR-–∫–æ–¥–æ–º)
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USER = "your_email@gmail.com"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –ø–æ—á—Ç—É
SMTP_PASSWORD = "your_app_password"  # –ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!

def send_email(email, name, qr_filename):
    try:
        msg = EmailMessage()
        msg["Subject"] = "–í–∞—à QR-–∫–æ–¥"
        msg["From"] = SMTP_USER
        msg["To"] = email
        msg.set_content(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!\n\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π QR-–∫–æ–¥ –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.")

        with open(qr_filename, "rb") as qr_file:
            msg.add_attachment(qr_file.read(), maintype="image", subtype="png", filename="qrcode.png")

        context = ssl.create_default_context()
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls(context=context)
            server.login(SMTP_USER, SMTP_PASSWORD)
            server.send_message(msg)

        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
        return False

# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Å—Ç—è (—Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email)
@app.route('/generate_qr', methods=['POST'])
def generate_qr():
    data = request.json if request.is_json else request.form.to_dict()
    name, surname, email = data.get("name"), data.get("surname"), data.get("email")

    if not name or not surname or not email:
        return jsonify({"error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ email –≤ –±–∞–∑–µ
    existing_guest = Guest.query.filter_by(email=email).first()
    if existing_guest:
        return jsonify({"error": "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}), 400

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    qr_filename = f"qrcodes/{email.replace('@', '_')}.png"
    os.makedirs("qrcodes", exist_ok=True)
    qr = qrcode.make(email)
    qr.save(qr_filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Å—Ç—è –≤ –±–∞–∑–µ
    new_guest = Guest(name=name, surname=surname, email=email)
    db.session.add(new_guest)
    db.session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    if send_email(email, name, qr_filename):
        return jsonify({"message": "QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email!"}), 200
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email"}), 500

# üîπ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ (–æ—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è)
@app.route('/scan_qr', methods=['POST'])
def scan_qr():
    data = request.json if request.is_json else request.form.to_dict()
    email = data.get("email")

    if not email:
        return jsonify({"error": "QR-–∫–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"}), 400

    guest = Guest.query.filter_by(email=email).first()
    if not guest:
        return jsonify({"error": "–ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    if guest.status == "–Ω–µ –ø—Ä–∏—à–µ–ª":
        guest.status = "–ø–æ—Å–µ—Ç–∏–ª"
        db.session.commit()
        return jsonify({"message": "–ì–æ—Å—Ç—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ—Å–µ—Ç–∏–≤—à–∏–π", "name": guest.name, "surname": guest.surname}), 200
    else:
        return jsonify({"message": "–ì–æ—Å—Ç—å —É–∂–µ –±—ã–ª –æ—Ç–º–µ—á–µ–Ω —Ä–∞–Ω–µ–µ", "name": guest.name, "surname": guest.surname}), 200

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)
